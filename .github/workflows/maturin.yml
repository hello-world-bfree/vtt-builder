name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
    inputs:
      run_linux:
        description: 'Run Linux builds'
        required: false
        default: 'true'
        type: boolean
      run_musllinux:
        description: 'Run MuslLinux builds'
        required: false
        default: 'true'
        type: boolean
      run_windows:
        description: 'Run Windows builds'
        required: false
        default: 'true'
        type: boolean
      run_macos:
        description: 'Run macOS builds'
        required: false
        default: 'true'
        type: boolean
      run_sdist:
        description: 'Run sdist build'
        required: false
        default: 'true'
        type: boolean
      linux_targets:
        description: 'Linux targets to build (comma-separated)'
        required: false
        default: 'x86_64,x86,aarch64,armv7,s390x,ppc64le'
        type: string
      musllinux_targets:
        description: 'MuslLinux targets to build (comma-separated)'
        required: false
        default: 'x86_64,x86,aarch64,armv7'
        type: string
      windows_targets:
        description: 'Windows targets to build (comma-separated)'
        required: false
        default: 'x64,x86'
        type: string
      macos_targets:
        description: 'macOS targets to build (comma-separated)'
        required: false
        default: 'x86_64,aarch64'
        type: string

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      linux-matrix: ${{ steps.set-matrix.outputs.linux-matrix }}
      musllinux-matrix: ${{ steps.set-matrix.outputs.musllinux-matrix }}
      windows-matrix: ${{ steps.set-matrix.outputs.windows-matrix }}
      macos-matrix: ${{ steps.set-matrix.outputs.macos-matrix }}
    steps:
      - id: set-matrix
        run: |
          # Linux matrix
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            linux_targets="${{ inputs.linux_targets }}"
          else
            linux_targets="x86_64,x86,aarch64,armv7,s390x,ppc64le"
          fi
          
          linux_matrix=$(echo "$linux_targets" | jq -R -c 'split(",") | map({"runner": "ubuntu-22.04", "target": .})')
          echo "linux-matrix=$linux_matrix" >> $GITHUB_OUTPUT
          
          # MuslLinux matrix
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            musllinux_targets="${{ inputs.musllinux_targets }}"
          else
            musllinux_targets="x86_64,x86,aarch64,armv7"
          fi
          
          musllinux_matrix=$(echo "$musllinux_targets" | jq -R -c 'split(",") | map({"runner": "ubuntu-22.04", "target": .})')
          echo "musllinux-matrix=$musllinux_matrix" >> $GITHUB_OUTPUT
          
          # Windows matrix
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            windows_targets="${{ inputs.windows_targets }}"
          else
            windows_targets="x64,x86"
          fi
          
          windows_matrix=$(echo "$windows_targets" | jq -R -c 'split(",") | map({"runner": "windows-latest", "target": .})')
          echo "windows-matrix=$windows_matrix" >> $GITHUB_OUTPUT
          
          # macOS matrix
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            macos_targets="${{ inputs.macos_targets }}"
          else
            macos_targets="x86_64,aarch64"
          fi
          
          macos_matrix=$(echo "$macos_targets" | jq -R -c 'split(",") | map(select(. == "x86_64") | {"runner": "macos-13", "target": .}) + map(select(. == "aarch64") | {"runner": "macos-14", "target": .})')
          echo "macos-matrix=$macos_matrix" >> $GITHUB_OUTPUT

  linux:
    runs-on: ${{ matrix.platform.runner }}
    if: ${{ (github.event_name != 'workflow_dispatch') || (inputs.run_linux == true) }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.linux-matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    if: ${{ (github.event_name != 'workflow_dispatch') || (inputs.run_musllinux == true) }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.musllinux-matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    if: ${{ (github.event_name != 'workflow_dispatch') || (inputs.run_windows == true) }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.windows-matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    if: ${{ (github.event_name != 'workflow_dispatch') || (inputs.run_macos == true) }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.macos-matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name != 'workflow_dispatch') || (inputs.run_sdist == true) }}
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
