name: Release

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the CI workflow that built the wheels (optional - will use latest successful run if not provided)'
        required: false
        type: string
  release:
    types: [published]

permissions:
  contents: read
  id-token: write
  attestations: write

jobs:
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Get artifacts from CI run
        uses: actions/github-script@v7
        id: get-run-id
        with:
          script: |
            const runId = '${{ inputs.run_id }}';

            if (runId) {
              console.log(`Using specified run ID: ${runId}`);
              return runId;
            }

            // Find the most recent successful CI run
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'maturin.yml',
              status: 'completed',
              conclusion: 'success',
              per_page: 10
            });

            if (runs.data.workflow_runs.length === 0) {
              throw new Error('No successful CI runs found');
            }

            const latestRun = runs.data.workflow_runs[0];
            console.log(`Using latest successful run: ${latestRun.id}`);
            return latestRun.id;

      - name: Download artifacts from CI run
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-run-id.outputs.result }}
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          find . -name "*.whl" -o -name "*.tar.gz" | sort

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: '**/*.whl'

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing **/*.whl **/*.tar.gz
